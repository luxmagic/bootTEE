ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"boot.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.configure_mpu,"ax",%progbits
  20              		.align	1
  21              		.global	configure_mpu
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	configure_mpu:
  27              	.LFB135:
  28              		.file 1 "Core/boot.c"
   1:Core/boot.c   **** #include "main.h"
   2:Core/boot.c   **** #include "boot.h"
   3:Core/boot.c   **** 
   4:Core/boot.c   **** void configure_mpu(void)
   5:Core/boot.c   **** {
  29              		.loc 1 5 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
   6:Core/boot.c   ****     MPU->RNR = 0;                                                                                //
  41              		.loc 1 6 8
  42 0004 0A4B     		ldr	r3, .L2
  43              		.loc 1 6 14
  44 0006 0022     		movs	r2, #0
  45 0008 9A60     		str	r2, [r3, #8]
   7:Core/boot.c   ****     MPU->RBAR = 0x08000000;                                                                      //
  46              		.loc 1 7 8
  47 000a 094B     		ldr	r3, .L2
  48              		.loc 1 7 15
  49 000c 4FF00062 		mov	r2, #134217728
  50 0010 DA60     		str	r2, [r3, #12]
   8:Core/boot.c   ****     MPU->RASR = (0x3 << MPU_RASR_AP_Pos) | (0x1 << MPU_RASR_XN_Pos) | (16 << MPU_RASR_SIZE_Pos); //
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 2


  51              		.loc 1 8 8
  52 0012 074B     		ldr	r3, .L2
  53              		.loc 1 8 15
  54 0014 074A     		ldr	r2, .L2+4
  55 0016 1A61     		str	r2, [r3, #16]
   9:Core/boot.c   ****     MPU->CTRL |= MPU_CTRL_ENABLE_Msk;                                                            //
  56              		.loc 1 9 15
  57 0018 054B     		ldr	r3, .L2
  58 001a 5B68     		ldr	r3, [r3, #4]
  59 001c 044A     		ldr	r2, .L2
  60 001e 43F00103 		orr	r3, r3, #1
  61 0022 5360     		str	r3, [r2, #4]
  10:Core/boot.c   **** }
  62              		.loc 1 10 1
  63 0024 00BF     		nop
  64 0026 BD46     		mov	sp, r7
  65              	.LCFI2:
  66              		.cfi_def_cfa_register 13
  67              		@ sp needed
  68 0028 5DF8047B 		ldr	r7, [sp], #4
  69              	.LCFI3:
  70              		.cfi_restore 7
  71              		.cfi_def_cfa_offset 0
  72 002c 7047     		bx	lr
  73              	.L3:
  74 002e 00BF     		.align	2
  75              	.L2:
  76 0030 90ED00E0 		.word	-536810096
  77 0034 20000013 		.word	318767136
  78              		.cfi_endproc
  79              	.LFE135:
  81              		.section	.boot,"ax",%progbits
  82              		.align	1
  83              		.global	Bootloader_Main
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  88              	Bootloader_Main:
  89              	.LFB136:
  11:Core/boot.c   **** 
  12:Core/boot.c   **** __attribute__((section(".boot"))) void Bootloader_Main(void)
  13:Core/boot.c   **** {
  90              		.loc 1 13 1
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 16
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94 0000 80B5     		push	{r7, lr}
  95              	.LCFI4:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 84B0     		sub	sp, sp, #16
 100              	.LCFI5:
 101              		.cfi_def_cfa_offset 24
 102 0004 00AF     		add	r7, sp, #0
 103              	.LCFI6:
 104              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 3


  14:Core/boot.c   ****     uint32_t app_start_address = 0x08010000;
 105              		.loc 1 14 14
 106 0006 0D4B     		ldr	r3, .L6
 107 0008 FB60     		str	r3, [r7, #12]
  15:Core/boot.c   ****     uint32_t app_reset_vector = *(volatile uint32_t *)(app_start_address + 4);
 108              		.loc 1 15 74
 109 000a FB68     		ldr	r3, [r7, #12]
 110 000c 0433     		adds	r3, r3, #4
 111              		.loc 1 15 14
 112 000e 1B68     		ldr	r3, [r3]
 113 0010 BB60     		str	r3, [r7, #8]
 114              	.LBB8:
  16:Core/boot.c   **** 
  17:Core/boot.c   ****     if (validate_app(app_start_address))
 115              		.loc 1 17 9
 116 0012 F868     		ldr	r0, [r7, #12]
 117 0014 FFF7FEFF 		bl	validate_app
 118 0018 0346     		mov	r3, r0
 119              		.loc 1 17 8
 120 001a 002B     		cmp	r3, #0
 121 001c 0CD0     		beq	.L5
 122              	.LBB9:
  18:Core/boot.c   ****     {
  19:Core/boot.c   ****         void (*app_entry)(void) = (void (*)(void))app_reset_vector;
 123              		.loc 1 19 16
 124 001e BB68     		ldr	r3, [r7, #8]
 125 0020 7B60     		str	r3, [r7, #4]
 126              	.LBB10:
 127              	.LBB11:
 128              		.file 2 "CMSIS/Include/cmsis_gcc.h"
   1:CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:CMSIS/Include/cmsis_gcc.h **** /*
   8:CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:CMSIS/Include/cmsis_gcc.h ****  *
  10:CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:CMSIS/Include/cmsis_gcc.h ****  *
  12:CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:CMSIS/Include/cmsis_gcc.h ****  *
  16:CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:CMSIS/Include/cmsis_gcc.h ****  *
  18:CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:CMSIS/Include/cmsis_gcc.h ****  */
  24:CMSIS/Include/cmsis_gcc.h **** 
  25:CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 4


  28:CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:CMSIS/Include/cmsis_gcc.h **** 
  34:CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:CMSIS/Include/cmsis_gcc.h **** #endif
  38:CMSIS/Include/cmsis_gcc.h **** 
  39:CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:CMSIS/Include/cmsis_gcc.h **** #endif
  43:CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:CMSIS/Include/cmsis_gcc.h **** #endif
  46:CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:CMSIS/Include/cmsis_gcc.h **** #endif
  49:CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:CMSIS/Include/cmsis_gcc.h **** #endif
  55:CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:CMSIS/Include/cmsis_gcc.h **** #endif
  58:CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:CMSIS/Include/cmsis_gcc.h **** #endif
  61:CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:CMSIS/Include/cmsis_gcc.h **** #endif
  64:CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:CMSIS/Include/cmsis_gcc.h **** #endif
  67:CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:CMSIS/Include/cmsis_gcc.h **** #endif
  70:CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:CMSIS/Include/cmsis_gcc.h **** #endif
  78:CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 5


  85:CMSIS/Include/cmsis_gcc.h **** #endif
  86:CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:CMSIS/Include/cmsis_gcc.h **** #endif
  94:CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:CMSIS/Include/cmsis_gcc.h **** #endif
 102:CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:CMSIS/Include/cmsis_gcc.h **** #endif
 110:CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:CMSIS/Include/cmsis_gcc.h **** #endif
 113:CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:CMSIS/Include/cmsis_gcc.h **** #endif
 116:CMSIS/Include/cmsis_gcc.h **** 
 117:CMSIS/Include/cmsis_gcc.h **** 
 118:CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:CMSIS/Include/cmsis_gcc.h ****   @{
 122:CMSIS/Include/cmsis_gcc.h ****  */
 123:CMSIS/Include/cmsis_gcc.h **** 
 124:CMSIS/Include/cmsis_gcc.h **** /**
 125:CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:CMSIS/Include/cmsis_gcc.h ****  */
 129:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:CMSIS/Include/cmsis_gcc.h **** {
 131:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:CMSIS/Include/cmsis_gcc.h **** }
 133:CMSIS/Include/cmsis_gcc.h **** 
 134:CMSIS/Include/cmsis_gcc.h **** 
 135:CMSIS/Include/cmsis_gcc.h **** /**
 136:CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:CMSIS/Include/cmsis_gcc.h ****  */
 140:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 6


 142:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 129              		.loc 2 142 3
 130              		.syntax unified
 131              	@ 142 "CMSIS/Include/cmsis_gcc.h" 1
 132 0022 72B6     		cpsid i
 133              	@ 0 "" 2
 143:CMSIS/Include/cmsis_gcc.h **** }
 134              		.loc 2 143 1
 135              		.thumb
 136              		.syntax unified
 137 0024 00BF     		nop
 138              	.LBE11:
 139              	.LBE10:
  20:Core/boot.c   ****         __disable_irq();
  21:Core/boot.c   ****         __set_MSP(*(volatile uint32_t *)app_start_address);
 140              		.loc 1 21 20
 141 0026 FB68     		ldr	r3, [r7, #12]
 142              		.loc 1 21 9
 143 0028 1B68     		ldr	r3, [r3]
 144 002a 3B60     		str	r3, [r7]
 145              	.LBB12:
 146              	.LBB13:
 144:CMSIS/Include/cmsis_gcc.h **** 
 145:CMSIS/Include/cmsis_gcc.h **** 
 146:CMSIS/Include/cmsis_gcc.h **** /**
 147:CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:CMSIS/Include/cmsis_gcc.h ****  */
 151:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:CMSIS/Include/cmsis_gcc.h **** {
 153:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:CMSIS/Include/cmsis_gcc.h **** 
 155:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:CMSIS/Include/cmsis_gcc.h **** }
 158:CMSIS/Include/cmsis_gcc.h **** 
 159:CMSIS/Include/cmsis_gcc.h **** 
 160:CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:CMSIS/Include/cmsis_gcc.h **** /**
 162:CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:CMSIS/Include/cmsis_gcc.h ****  */
 166:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:CMSIS/Include/cmsis_gcc.h **** {
 168:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:CMSIS/Include/cmsis_gcc.h **** 
 170:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:CMSIS/Include/cmsis_gcc.h **** }
 173:CMSIS/Include/cmsis_gcc.h **** #endif
 174:CMSIS/Include/cmsis_gcc.h **** 
 175:CMSIS/Include/cmsis_gcc.h **** 
 176:CMSIS/Include/cmsis_gcc.h **** /**
 177:CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 7


 179:CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:CMSIS/Include/cmsis_gcc.h ****  */
 181:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:CMSIS/Include/cmsis_gcc.h **** {
 183:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:CMSIS/Include/cmsis_gcc.h **** }
 185:CMSIS/Include/cmsis_gcc.h **** 
 186:CMSIS/Include/cmsis_gcc.h **** 
 187:CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:CMSIS/Include/cmsis_gcc.h **** /**
 189:CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:CMSIS/Include/cmsis_gcc.h ****  */
 193:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:CMSIS/Include/cmsis_gcc.h **** {
 195:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:CMSIS/Include/cmsis_gcc.h **** }
 197:CMSIS/Include/cmsis_gcc.h **** #endif
 198:CMSIS/Include/cmsis_gcc.h **** 
 199:CMSIS/Include/cmsis_gcc.h **** 
 200:CMSIS/Include/cmsis_gcc.h **** /**
 201:CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:CMSIS/Include/cmsis_gcc.h ****  */
 205:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:CMSIS/Include/cmsis_gcc.h **** {
 207:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:CMSIS/Include/cmsis_gcc.h **** 
 209:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:CMSIS/Include/cmsis_gcc.h **** }
 212:CMSIS/Include/cmsis_gcc.h **** 
 213:CMSIS/Include/cmsis_gcc.h **** 
 214:CMSIS/Include/cmsis_gcc.h **** /**
 215:CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:CMSIS/Include/cmsis_gcc.h ****  */
 219:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:CMSIS/Include/cmsis_gcc.h **** {
 221:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:CMSIS/Include/cmsis_gcc.h **** 
 223:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:CMSIS/Include/cmsis_gcc.h **** }
 226:CMSIS/Include/cmsis_gcc.h **** 
 227:CMSIS/Include/cmsis_gcc.h **** 
 228:CMSIS/Include/cmsis_gcc.h **** /**
 229:CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:CMSIS/Include/cmsis_gcc.h ****  */
 233:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:CMSIS/Include/cmsis_gcc.h **** {
 235:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 8


 236:CMSIS/Include/cmsis_gcc.h **** 
 237:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:CMSIS/Include/cmsis_gcc.h **** }
 240:CMSIS/Include/cmsis_gcc.h **** 
 241:CMSIS/Include/cmsis_gcc.h **** 
 242:CMSIS/Include/cmsis_gcc.h **** /**
 243:CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:CMSIS/Include/cmsis_gcc.h ****  */
 247:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:CMSIS/Include/cmsis_gcc.h **** {
 249:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:CMSIS/Include/cmsis_gcc.h **** 
 251:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:CMSIS/Include/cmsis_gcc.h **** }
 254:CMSIS/Include/cmsis_gcc.h **** 
 255:CMSIS/Include/cmsis_gcc.h **** 
 256:CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:CMSIS/Include/cmsis_gcc.h **** /**
 258:CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:CMSIS/Include/cmsis_gcc.h ****  */
 262:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:CMSIS/Include/cmsis_gcc.h **** {
 264:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:CMSIS/Include/cmsis_gcc.h **** 
 266:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:CMSIS/Include/cmsis_gcc.h **** }
 269:CMSIS/Include/cmsis_gcc.h **** #endif
 270:CMSIS/Include/cmsis_gcc.h **** 
 271:CMSIS/Include/cmsis_gcc.h **** 
 272:CMSIS/Include/cmsis_gcc.h **** /**
 273:CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:CMSIS/Include/cmsis_gcc.h ****  */
 277:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:CMSIS/Include/cmsis_gcc.h **** {
 279:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:CMSIS/Include/cmsis_gcc.h **** }
 281:CMSIS/Include/cmsis_gcc.h **** 
 282:CMSIS/Include/cmsis_gcc.h **** 
 283:CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:CMSIS/Include/cmsis_gcc.h **** /**
 285:CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:CMSIS/Include/cmsis_gcc.h ****  */
 289:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:CMSIS/Include/cmsis_gcc.h **** {
 291:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 9


 293:CMSIS/Include/cmsis_gcc.h **** #endif
 294:CMSIS/Include/cmsis_gcc.h **** 
 295:CMSIS/Include/cmsis_gcc.h **** 
 296:CMSIS/Include/cmsis_gcc.h **** /**
 297:CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:CMSIS/Include/cmsis_gcc.h ****  */
 301:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:CMSIS/Include/cmsis_gcc.h **** {
 303:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:CMSIS/Include/cmsis_gcc.h **** 
 305:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:CMSIS/Include/cmsis_gcc.h **** }
 308:CMSIS/Include/cmsis_gcc.h **** 
 309:CMSIS/Include/cmsis_gcc.h **** 
 310:CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:CMSIS/Include/cmsis_gcc.h **** /**
 312:CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:CMSIS/Include/cmsis_gcc.h ****  */
 316:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:CMSIS/Include/cmsis_gcc.h **** {
 318:CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:CMSIS/Include/cmsis_gcc.h **** 
 320:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:CMSIS/Include/cmsis_gcc.h **** }
 323:CMSIS/Include/cmsis_gcc.h **** #endif
 324:CMSIS/Include/cmsis_gcc.h **** 
 325:CMSIS/Include/cmsis_gcc.h **** 
 326:CMSIS/Include/cmsis_gcc.h **** /**
 327:CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:CMSIS/Include/cmsis_gcc.h ****  */
 331:CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:CMSIS/Include/cmsis_gcc.h **** {
 333:CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 147              		.loc 2 333 3
 148 002c 3B68     		ldr	r3, [r7]
 149              		.syntax unified
 150              	@ 333 "CMSIS/Include/cmsis_gcc.h" 1
 151 002e 83F30888 		MSR msp, r3
 152              	@ 0 "" 2
 334:CMSIS/Include/cmsis_gcc.h **** }
 153              		.loc 2 334 1
 154              		.thumb
 155              		.syntax unified
 156 0032 00BF     		nop
 157              	.LBE13:
 158              	.LBE12:
  22:Core/boot.c   ****         app_entry();
 159              		.loc 1 22 9
 160 0034 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 10


 161 0036 9847     		blx	r3
 162              	.LVL0:
 163              	.L5:
 164              	.LBE9:
 165              	.LBE8:
  23:Core/boot.c   ****     }
  24:Core/boot.c   **** 
  25:Core/boot.c   ****     while (1); // Ожидание отладки или перезапуска
 166              		.loc 1 25 11 discriminator 1
 167 0038 FEE7     		b	.L5
 168              	.L7:
 169 003a 00BF     		.align	2
 170              	.L6:
 171 003c 00000108 		.word	134283264
 172              		.cfi_endproc
 173              	.LFE136:
 175              		.section	.text.validate_app,"ax",%progbits
 176              		.align	1
 177              		.global	validate_app
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 182              	validate_app:
 183              	.LFB137:
  26:Core/boot.c   **** }
  27:Core/boot.c   **** 
  28:Core/boot.c   **** int validate_app(uint32_t base_addr)
  29:Core/boot.c   **** {
 184              		.loc 1 29 1
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 24
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 0000 80B4     		push	{r7}
 190              	.LCFI7:
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 7, -4
 193 0002 87B0     		sub	sp, sp, #28
 194              	.LCFI8:
 195              		.cfi_def_cfa_offset 32
 196 0004 00AF     		add	r7, sp, #0
 197              	.LCFI9:
 198              		.cfi_def_cfa_register 7
 199 0006 7860     		str	r0, [r7, #4]
  30:Core/boot.c   ****     uint32_t expected_crc = *(uint32_t *)(base_addr + 0x1000 - 4); // CRC в конце
 200              		.loc 1 30 62
 201 0008 7B68     		ldr	r3, [r7, #4]
 202 000a 03F6FC73 		addw	r3, r3, #4092
 203              		.loc 1 30 14
 204 000e 1B68     		ldr	r3, [r3]
 205 0010 FB60     		str	r3, [r7, #12]
  31:Core/boot.c   ****     uint32_t calc_crc = 0;
 206              		.loc 1 31 14
 207 0012 0023     		movs	r3, #0
 208 0014 7B61     		str	r3, [r7, #20]
 209              	.LBB14:
  32:Core/boot.c   ****     for (uint32_t *p = (uint32_t *)base_addr; p < (uint32_t *)(base_addr + 0x1000 - 4); ++p)
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 11


 210              		.loc 1 32 20
 211 0016 7B68     		ldr	r3, [r7, #4]
 212 0018 3B61     		str	r3, [r7, #16]
 213              		.loc 1 32 5
 214 001a 07E0     		b	.L9
 215              	.L10:
  33:Core/boot.c   ****     {
  34:Core/boot.c   ****         calc_crc ^= *p; // Простейшая проверка — XOR
 216              		.loc 1 34 21 discriminator 3
 217 001c 3B69     		ldr	r3, [r7, #16]
 218 001e 1B68     		ldr	r3, [r3]
 219              		.loc 1 34 18 discriminator 3
 220 0020 7A69     		ldr	r2, [r7, #20]
 221 0022 5340     		eors	r3, r3, r2
 222 0024 7B61     		str	r3, [r7, #20]
  32:Core/boot.c   ****     for (uint32_t *p = (uint32_t *)base_addr; p < (uint32_t *)(base_addr + 0x1000 - 4); ++p)
 223              		.loc 1 32 89 discriminator 3
 224 0026 3B69     		ldr	r3, [r7, #16]
 225 0028 0433     		adds	r3, r3, #4
 226 002a 3B61     		str	r3, [r7, #16]
 227              	.L9:
  32:Core/boot.c   ****     for (uint32_t *p = (uint32_t *)base_addr; p < (uint32_t *)(base_addr + 0x1000 - 4); ++p)
 228              		.loc 1 32 83 discriminator 1
 229 002c 7B68     		ldr	r3, [r7, #4]
 230 002e 03F6FC73 		addw	r3, r3, #4092
  32:Core/boot.c   ****     for (uint32_t *p = (uint32_t *)base_addr; p < (uint32_t *)(base_addr + 0x1000 - 4); ++p)
 231              		.loc 1 32 51 discriminator 1
 232 0032 1A46     		mov	r2, r3
  32:Core/boot.c   ****     for (uint32_t *p = (uint32_t *)base_addr; p < (uint32_t *)(base_addr + 0x1000 - 4); ++p)
 233              		.loc 1 32 5 discriminator 1
 234 0034 3B69     		ldr	r3, [r7, #16]
 235 0036 9342     		cmp	r3, r2
 236 0038 F0D3     		bcc	.L10
 237              	.LBE14:
  35:Core/boot.c   ****     }
  36:Core/boot.c   ****     return calc_crc == expected_crc;
 238              		.loc 1 36 21
 239 003a 7A69     		ldr	r2, [r7, #20]
 240 003c FB68     		ldr	r3, [r7, #12]
 241 003e 9A42     		cmp	r2, r3
 242 0040 0CBF     		ite	eq
 243 0042 0123     		moveq	r3, #1
 244 0044 0023     		movne	r3, #0
 245 0046 DBB2     		uxtb	r3, r3
  37:Core/boot.c   **** }
 246              		.loc 1 37 1
 247 0048 1846     		mov	r0, r3
 248 004a 1C37     		adds	r7, r7, #28
 249              	.LCFI10:
 250              		.cfi_def_cfa_offset 4
 251 004c BD46     		mov	sp, r7
 252              	.LCFI11:
 253              		.cfi_def_cfa_register 13
 254              		@ sp needed
 255 004e 5DF8047B 		ldr	r7, [sp], #4
 256              	.LCFI12:
 257              		.cfi_restore 7
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 12


 258              		.cfi_def_cfa_offset 0
 259 0052 7047     		bx	lr
 260              		.cfi_endproc
 261              	.LFE137:
 263              		.section	.text.jump_to_application,"ax",%progbits
 264              		.align	1
 265              		.global	jump_to_application
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 270              	jump_to_application:
 271              	.LFB138:
  38:Core/boot.c   **** 
  39:Core/boot.c   **** void jump_to_application(void)
  40:Core/boot.c   **** {
 272              		.loc 1 40 1
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277 0000 80B4     		push	{r7}
 278              	.LCFI13:
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 0002 00AF     		add	r7, sp, #0
 282              	.LCFI14:
 283              		.cfi_def_cfa_register 7
  41:Core/boot.c   ****     // // Адрес начала приложения
  42:Core/boot.c   ****     // uint32_t app_address = 0x08004000;
  43:Core/boot.c   **** 
  44:Core/boot.c   ****     // // Проверка вектора прерываний приложения
  45:Core/boot.c   ****     // if ((*(volatile uint32_t *)(app_address + 4)) != 0xFFFFFFFF)
  46:Core/boot.c   ****     // {
  47:Core/boot.c   ****     //     // Отключение всех прерываний
  48:Core/boot.c   ****     //     __disable_irq();
  49:Core/boot.c   **** 
  50:Core/boot.c   ****     //     // Установка указателя стека приложения
  51:Core/boot.c   ****     //     __set_MSP(*(volatile uint32_t *)app_address);
  52:Core/boot.c   **** 
  53:Core/boot.c   ****     //     // Переход к функции Reset_Handler приложения
  54:Core/boot.c   ****     //     void (*app_reset_handler)(void) = (void *)(*(volatile uint32_t *)(app_address + 4));
  55:Core/boot.c   ****     //     app_reset_handler();
  56:Core/boot.c   ****     // }
  57:Core/boot.c   **** }
 284              		.loc 1 57 1
 285 0004 00BF     		nop
 286 0006 BD46     		mov	sp, r7
 287              	.LCFI15:
 288              		.cfi_def_cfa_register 13
 289              		@ sp needed
 290 0008 5DF8047B 		ldr	r7, [sp], #4
 291              	.LCFI16:
 292              		.cfi_restore 7
 293              		.cfi_def_cfa_offset 0
 294 000c 7047     		bx	lr
 295              		.cfi_endproc
 296              	.LFE138:
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 13


 298              		.section	.text.check_flash_protection,"ax",%progbits
 299              		.align	1
 300              		.global	check_flash_protection
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 305              	check_flash_protection:
 306              	.LFB139:
  58:Core/boot.c   **** 
  59:Core/boot.c   **** void check_flash_protection(void)
  60:Core/boot.c   **** {
 307              		.loc 1 60 1
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311 0000 80B5     		push	{r7, lr}
 312              	.LCFI17:
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 7, -8
 315              		.cfi_offset 14, -4
 316 0002 00AF     		add	r7, sp, #0
 317              	.LCFI18:
 318              		.cfi_def_cfa_register 7
  61:Core/boot.c   ****     // if (FLASH->OPTCR1 & FLASH_OPTCR1_nWRP_0)
  62:Core/boot.c   ****     // {
  63:Core/boot.c   ****         // Сектор 0 защищён
  64:Core/boot.c   ****         blink_run(50);
 319              		.loc 1 64 9
 320 0004 3220     		movs	r0, #50
 321 0006 FFF7FEFF 		bl	blink_run
  65:Core/boot.c   ****     // }
  66:Core/boot.c   ****     // else
  67:Core/boot.c   ****     // {
  68:Core/boot.c   ****     //     // Ошибка: защита не активна
  69:Core/boot.c   ****         
  70:Core/boot.c   ****     //     blink_run(1000);
  71:Core/boot.c   ****     //     while(1);
  72:Core/boot.c   ****     // }
  73:Core/boot.c   **** }
 322              		.loc 1 73 1
 323 000a 00BF     		nop
 324 000c 80BD     		pop	{r7, pc}
 325              		.cfi_endproc
 326              	.LFE139:
 328              		.text
 329              	.Letext0:
 330              		.file 3 "d:\\gcc arm\\10 2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 331              		.file 4 "d:\\gcc arm\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 332              		.file 5 "CMSIS/Include/core_cm4.h"
ARM GAS  C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 boot.c
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:20     .text.configure_mpu:00000000 $t
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:26     .text.configure_mpu:00000000 configure_mpu
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:76     .text.configure_mpu:00000030 $d
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:82     .boot:00000000 $t
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:88     .boot:00000000 Bootloader_Main
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:182    .text.validate_app:00000000 validate_app
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:171    .boot:0000003c $d
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:176    .text.validate_app:00000000 $t
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:264    .text.jump_to_application:00000000 $t
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:270    .text.jump_to_application:00000000 jump_to_application
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:299    .text.check_flash_protection:00000000 $t
C:\Users\clay0\AppData\Local\Temp\ccvxsZx7.s:305    .text.check_flash_protection:00000000 check_flash_protection

UNDEFINED SYMBOLS
blink_run
